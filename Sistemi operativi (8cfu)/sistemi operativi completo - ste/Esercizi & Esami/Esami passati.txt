Es1: parcheggio di 100 posti. Ci accedono auto (che occupano 2 posti) e moto (1 posto). 
Programmare l'ingresso e l'uscita usando lo pseudocodice rispettando i vincoli: 
1) se il parcheggio non ha posti liberi nessuno può entrare 
2) se il num di moto>5 e ci sono almeno tante moto quante auto, nessuna moto può entrare 
3) chi vuole parcheggiare ma non può deve andare in attesa e avere prima o poi la 
possibilità di parcheggiare (no starvation) 
4)nessuno deve essere mai in attesa di parcheggiare senza motivo

Es2: Supponiamo di avere un array di interi, lunghezza k. Si scrivano due porzioni di 
pseudocodice che, se eseguite in concorrenza, possono dar luogo ad una race condition, 
spiegabile senza ricorrere all'implementazione in linguaggio macchina delle instruzioni 
ad alto livello.

Es3: si descriva in <= 30 righe di testo il demand paging

------------------------------------------------------------------------------------------------------------------

Es1. Programmare un distributore di bottiglie d'acqua. Vi saranno consumatori e fornitori 
normali, e un fornitore speciale che riempe l'intero distributore se ci sono meno di 40 
bottiglie.

Es2. Spiegare una race condition con codice dato da lui.

Es3. Descrivere gli stati di un processo e le transizioni.

------------------------------------------------------------------------------------------------------------------

Es1.Parcheggio di 50 posti. Vi saranno abbonati di tipo A e B.
1) se il parcheggio non ha posti liberi nessuno può entrare 
2) se il num di B>=5 e ci sono almeno tanti B quanti A, nessuna B può entrare 
3) chi vuole parcheggiare ma non può deve andare in attesa e avere prima o poi la 
possibilità di parcheggiare (no starvation) 
4)nessuno deve essere mai in attesa di parcheggiare senza motivo

Es2. 2 thread, bisognava dire se si verificava race condition durante l'esecuzione.

Es3.Spiegare la paginazione e anche come la MMU traduce i bit.